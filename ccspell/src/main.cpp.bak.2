#include "BloomFilter.h"

#include <cmath>
#include <iostream>
#include <array>
#include <string_view>
#include <sstream>
#include <string>
#include <fstream>
#include <cassert>
#include <arpa/inet.h>
#include <bitset>
#include <vector>
#include <cstring>
#include <climits>
#include <iterator>

int main(int argc, char** argv) {
    constexpr int n = 1000000;
    constexpr double epsilon = 0.02;

    constexpr int m = (- n * std::log(epsilon) / std::pow(std::log(2),2));

    BloomFilter<m> bf{};

    bool buildDict = false;
    for(int i = 0; i < argc; ++i) {
        std::string_view str{argv[i]};
        std::cout << "argv: " << str << "\n";
        buildDict = str.find("-build") != std::string_view::npos;
    }

    std::cout << "Building dict...\n";
    std::ifstream infile("../src/dict.txt");
    assert(infile.is_open() && "file not open");
    std::string line;
    while (std::getline(infile, line))
    {
        bf.store(line);
    }
        std::vector<uint8_t> bytes{};
        auto getByte = [ba = bf.bitarray_](int i){
            uint8_t byte{};
            for(int j = 0; j < 8; ++j){
                byte |= ba[i + j];
                if(j < 7){
                    byte = byte << 1;
                }
            }
            return byte;
        };
        for(long unsigned i = 0; i < m; i += 8){
            bytes.push_back(getByte(i));
        }
        assert(bf.bitarray_.any());
        if(buildDict){
            std::ofstream fs("words.bf", std::ios::out | std::ios::binary | std::ios::app);
            fs.write("CCBF", 4);
            auto version = htons(bf.version);
            std::cout << "version " << std::hex << version << "\n";
            fs.write(reinterpret_cast<const char*>(&version), 2);
            auto numhashes = htons(bf.numhashes);
            fs.write(reinterpret_cast<const char*>(&numhashes), 2);
            auto firstBytes = htons(bf.m_ >> 16);
            std::cout << "first " << std::hex << firstBytes << "\n";
            auto secondBytes = htons(bf.m_ & 0xffff);
            std::cout << "second " << std::hex << secondBytes << "\n";
            fs.write(reinterpret_cast<const char*>(&firstBytes), 2);
            fs.write(reinterpret_cast<const char*>(&secondBytes), 2);


            std::cout << "bits size " << std::dec << bytes.size() << "\n";
            fs.write(reinterpret_cast<const char*>(bytes.data()), bytes.size());
            fs.close();
            std::cout << "Done...\n";
            return 0;
        }
    std::cout << "version " << std::hex << htons(bf.version) << "\n";

        std::ifstream binfile("words.bf", std::ios::binary);
        assert(binfile.is_open() && "file not open");
        std::vector<uint8_t> ccheader{};
        for(int i = 0; i < 12; ++i)
        {
            char byte;
            binfile.read(&byte, sizeof(char));
            ccheader.push_back(static_cast<uint8_t>(byte));
        }

        std::string prefix{static_cast<char>(ccheader[0]),static_cast<char>(ccheader[1]),static_cast<char>(ccheader[2]),static_cast<char>(ccheader[3])};
        assert(prefix == "CCBF" && "Prefix is incorrect");

        int version=0;
        version = (+ccheader[4] << 8);
        version |= +ccheader[5];
        assert(version == 1);

        int numHashes{};
        numHashes = (+ccheader[6] << 8);
        numHashes |= +ccheader[7];

        int firstByte = 0;
        firstByte = (+ccheader[8] << 8);
        firstByte |= +ccheader[9];

        int secondByte = 0;
        secondByte = (+ccheader[10] << 8);
        secondByte |= +ccheader[11];
        int numBytes = (((firstByte << 16) | secondByte) + 7)/8; // round up for partial bytes
        assert(numBytes*8 >= m && "Num bits are incorrect");
        std::vector<bool> bitset{};

        char byte;
        std::vector<uint8_t> tmp{};
        tmp.reserve(numBytes);
        while(binfile.read(&byte, sizeof(byte)))
        {
            tmp.push_back(static_cast<int>(byte));
        }
        for(const auto byte : tmp){
            for(int i = 0; i < 8; ++i){
                bitset.push_back((byte >> (7-i)) & 0x1);
            }
        }
        //assert(bytes == tmp);
        assert(!bytes.empty());
        assert(!tmp.empty());
        for(int i = 0; i < bf.m_; ++i) {
            assert(bf.bitarray_[i] == bitset[i]);
        }

    for(int i = 1; i < argc; ++i) {
        std::string_view str{argv[i]};
        auto res = bf.lookup2(str);
        if (bitset[res.a] && bitset[res.b] && bitset[res.c]){
            std::cout << str << " is correct!\n";
        } else {
            std::cout << str << " is NOT correct!\n";
        }
    }
        binfile.close();

}
